# RevBayes Chromosome SEE script
# Original by Will Freyman, UC Berkeley
# Modified by Natalie Cooper

# Data: No Outgroup
# Root: Iguania
# Model: Gain and Loss 

###################
# Read in the data 
###################
# Read in the phylogeny. 
phylogeny <- readTrees("data/tree_for_ChromoSSE_noOutgroup.tre")[1]

# Maximum number of chromosomes, i.e. largest chromosome count plus 10.
max_chromo = 41

# Get the chromosome counts from a tab-delimited file.
chromo_data = readCharacterDataDelimited("data/data_for_ChromoSSE_noOutgroup.tsv", 
                                         stateLabels=(max_chromo + 1), 
                                         type="NaturalNumbers", 
                                         delimiter="\t", 
                                         header=FALSE)

#########################
# Chromosome Model
#########################
# Anagenetic changes
#########################

# Set the expected number of anagenetic events.
# 2 is the default, but should be larger for very large trees (our tree is not very large)
ana_events = 2

# rate of chromosome gains
gamma ~ dnExponential(10.0)

# rate of chromosome losses
delta ~ dnExponential(10.0)

# Add MCMC moves for each of the rates.
mvi = 1
moves[mvi++] = mvScale(gamma, lambda=1, weight=1) 
moves[mvi++] = mvScale(delta, lambda=1, weight=1) 

# Rate of chromosome gain and loss
Q := fnChromosomes(max_chromo, gamma, delta)

#########################
# Cladogenetic changes:
#########################

# expected num species at time t under constant birth-death is
# # E(N_t) = N_0 e^{rt}
# # therefore net diversification r is
# # r = ( ln N_t - ln N_0 ) / t
# # we use r as the mean for the speciation prior
taxa <- phylogeny.taxa()
speciation_mean <- ln( taxa.size() ) / phylogeny.rootAge()
speciation_pr <- 1 / speciation_mean

# Each cladogenetic event type is assigned its own speciation rate.
# Set the rate of polyploidization and demi-polyploidization to 0.0 to exclude them.
clado_no_change ~ dnExponential(speciation_pr)
clado_fission ~ dnExponential(speciation_pr)
clado_fusion ~ dnExponential(speciation_pr)
clado_polyploid = 0.0
clado_demipoly = 0.0

# MCMC moves for speciation rates
moves[mvi++] = mvScale(clado_no_change, lambda=5.0, weight=1)
moves[mvi++] = mvScale(clado_fission, lambda=5.0, weight=1)
moves[mvi++] = mvScale(clado_fusion, lambda=5.0, weight=1)

# set a vector to hold the speciation rates
speciation_rates := [clado_no_change, clado_fission, clado_fusion, clado_polyploid, clado_demipoly]
total_speciation := sum(speciation_rates)

# map the speciation rates to chromosome cladogenetic events
clado_matrix := fnChromosomesCladoEventsBD(speciation_rates, max_chromo)

# a stochastic variable to represent the turnover. 
turnover ~ dnUniform(0, 1.0)
turnover.setValue(0.4)
moves[mvi++] = mvScale(turnover, lambda=5.0, weight=3.0)

# Make a vector of extinction rates for each state.
# In the basic ChromoSSE model we assume all chromosome 
# numbers have the same extinction rate.
for (i in 1:(max_chromo + 1)) {
    extinction[i] := turnover * total_speciation 
}

#########################
# Root frequencies
#########################
# Iguania
root_frequencies := simplex([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])

#########################
# Set the probability of sampling species at the present = 100%
rho_bd <- 1.0

# Construct a variable for the tree and chromosomes drawn from a 
# cladogenetic character state dependent birth death process
chromo_bdp ~ dnCDBDP( rootAge            = phylogeny.rootAge(),
                      cladoEventMap      = clado_matrix,
                      extinctionRates    = extinction, 
                      Q                  = Q,
                      pi                 = root_frequencies,
                      rho                = rho_bd )


# and clamp the observed tree and the chromosome count data
chromo_bdp.clamp(phylogeny)
chromo_bdp.clampCharData(chromo_data)


# Finally we wrap our model into a single model object.
mymodel = model(phylogeny)

#########################
# MCMC
#########################

# Create the MCMC monitors:
# First, a screen monitor with some useful variables:
monitors[1] = mnScreen(printgen=10)

# The ancestral state monitor for sampling ancestral states:
monitors[2] = mnJointConditionalAncestralState(filename="output/ChromoSSE_noOutgroup_iguania_anc_states.log", printgen=10, tree=phylogeny, cdbdp=chromo_bdp, withStartStates=true, type="NaturalNumbers")

# And another monitor for all the model variables:
monitors[3] = mnModel(filename="output/ChromoSSE_noOutgroup_iguania_model.log", printgen=10)

# Now set up the MCMC.
mymcmc = mcmc(mymodel, monitors, moves)

# Run the MCMC. Note that for a real analysis you'd want to run many more 
# iterations and check for convergence.
mymcmc.run(iterations)


#########################
# Summarize the results 
#########################


# Now let's summarize the sampled ancestral chromosome numbers.
# First, read in the ancestral state trace:
anc_state_trace = readAncestralStateTrace("output/ChromoSSE_noOutgroup_iguania_anc_states.log")

# Finally, summarize the values from the traces over the phylogeny.
# Here we do a marginal reconstruction of the ancestral states, discarding the first 25% of samples
# as burnin.
ancestralStateTree(phylogeny, anc_state_trace, "output/ChromoSSE_noOutgroup_iguania_final.tree", burnin=0.25, include_start_states=true, reconstruction="marginal")
